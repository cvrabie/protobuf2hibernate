// Generated by the protocol buffer compiler.  DO NOT EDIT!

package org.codeandmagic.protobuf2hibernate.sample;

public  final class Person extends
    com.google.protobuf.GeneratedMessage {
  // Use Person.newBuilder() to construct.
  private Person() {}
  
  private static final Person defaultInstance = new Person();
  public static Person getDefaultInstance() {
    return defaultInstance;
  }
  
  public Person getDefaultInstanceForType() {
    return defaultInstance;
  }
  
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.codeandmagic.protobuf2hibernate.sample.Descriptor_Person.internal_static_domain_Person_descriptor;
  }
  
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.codeandmagic.protobuf2hibernate.sample.Descriptor_Person.internal_static_domain_Person_fieldAccessorTable;
  }
  
  // required string name = 2;
  public static final int NAME_FIELD_NUMBER = 2;
  private boolean hasName;
  private java.lang.String name_ = "";
  public boolean hasName() { return hasName; }
  public java.lang.String getName() { return name_; }
  
  public boolean equals(Object otherObject) {
    if (otherObject == this) return true;
    if (!(otherObject instanceof Person)) return false;
    if (hashCode() != otherObject.hashCode()) return false;
    Person other = (Person) otherObject;
    if (hasName) {
      if (!other.hasName) return false;
      if (!name_.equals(other.name_)) return false;
    } else {
      if (other.hasName) return false;
    }
    return getUnknownFields().equals(other.getUnknownFields());
  }
  public boolean super_equals(final Object otherObject) { return super.equals(otherObject); }
  
  private int computedHashCode = 0;
  public int hashCode() {
    if (computedHashCode == 0) {
      computedHashCode = super.hashCode();
    }
    return computedHashCode;
  }
  public int super_hashCode() { return super.hashCode(); }
  
  public final boolean isInitialized() {
    if (!hasName) return false;
    return true;
  }
  
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (hasName()) {
      output.writeString(2, getName());
    }
    getUnknownFields().writeTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
  
    size = 0;
    if (hasName()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getName());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }
  
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return newBuilder().mergeFrom(data).buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return newBuilder().mergeFrom(data, extensionRegistry)
             .buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return newBuilder().mergeFrom(data).buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return newBuilder().mergeFrom(data, extensionRegistry)
             .buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return newBuilder().mergeFrom(input).buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return newBuilder().mergeFrom(input, extensionRegistry)
             .buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return newBuilder().mergeDelimitedFrom(input).buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
             .buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return newBuilder().mergeFrom(input).buildParsed();
  }
  public static org.codeandmagic.protobuf2hibernate.sample.Person parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return newBuilder().mergeFrom(input, extensionRegistry)
             .buildParsed();
  }
  
  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.codeandmagic.protobuf2hibernate.sample.Person prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }
  
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> {
    private org.codeandmagic.protobuf2hibernate.sample.Person result;
    
    // Construct using org.codeandmagic.protobuf2hibernate.sample.Person.newBuilder()
    private Builder() {}
    
    private static Builder create() {
      Builder builder = new Builder();
      builder.result = new org.codeandmagic.protobuf2hibernate.sample.Person();
      return builder;
    }
    
    protected org.codeandmagic.protobuf2hibernate.sample.Person internalGetResult() {
      return result;
    }
    
    public Builder clear() {
      if (result == null) {
        throw new IllegalStateException(
          "Cannot call clear() after build().");
      }
      result = new org.codeandmagic.protobuf2hibernate.sample.Person();
      return this;
    }
    
    public Builder clone() {
      return create().mergeFrom(result);
    }
    
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.codeandmagic.protobuf2hibernate.sample.Person.getDescriptor();
    }
    
    public org.codeandmagic.protobuf2hibernate.sample.Person getDefaultInstanceForType() {
      return org.codeandmagic.protobuf2hibernate.sample.Person.getDefaultInstance();
    }
    
    public boolean isInitialized() {
      return result.isInitialized();
    }
    public org.codeandmagic.protobuf2hibernate.sample.Person build() {
      if (result != null && !isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return buildPartial();
    }
    
    private org.codeandmagic.protobuf2hibernate.sample.Person buildParsed()
        throws com.google.protobuf.InvalidProtocolBufferException {
      if (!isInitialized()) {
        throw newUninitializedMessageException(
          result).asInvalidProtocolBufferException();
      }
      return buildPartial();
    }
    
    public org.codeandmagic.protobuf2hibernate.sample.Person buildPartial() {
      if (result == null) {
        throw new IllegalStateException(
          "build() has already been called on this Builder.");
      }
      org.codeandmagic.protobuf2hibernate.sample.Person returnMe = result;
      result = null;
      return returnMe;
    }
    
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.codeandmagic.protobuf2hibernate.sample.Person) {
        return mergeFrom((org.codeandmagic.protobuf2hibernate.sample.Person)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }
    
    public Builder mergeFrom(org.codeandmagic.protobuf2hibernate.sample.Person other) {
      if (other == org.codeandmagic.protobuf2hibernate.sample.Person.getDefaultInstance()) return this;
      if (other.hasName()) {
        setName(other.getName());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }
    
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder(
          this.getUnknownFields());
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            this.setUnknownFields(unknownFields.build());
            return this;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              this.setUnknownFields(unknownFields.build());
              return this;
            }
            break;
          }
          case 18: {
            setName(input.readString());
            break;
          }
        }
      }
    }
    
    
    // required string name = 2;
    public boolean hasName() {
      return result.hasName();
    }
    public java.lang.String getName() {
      return result.getName();
    }
    public Builder setName(java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder clearName() {
      result.hasName = false;
      result.name_ = getDefaultInstance().getName();
      return this;
    }
  }
  
  static {
    org.codeandmagic.protobuf2hibernate.sample.Descriptor_Person.getDescriptor();
  }
  
  static {
    org.codeandmagic.protobuf2hibernate.sample.Descriptor_Person.internalForceInit();
  }
}

